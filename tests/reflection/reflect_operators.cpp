#include <reflection/reflection.h>

#define REFLECTION_OPERATOR_COMMA operator,

REFLECTION_REFLECTABLE_NONINTRUSIVE_UNARY_OPERATOR(auto, operator!,    member_function);
REFLECTABLE(auto, operator!=,                 member_function);
REFLECTABLE(auto, operator%,                  member_function);
REFLECTABLE(auto, operator%=,                 member_function);
REFLECTABLE(auto, operator&,                  member_function);
REFLECTABLE(auto, operator&&,                 member_function);
REFLECTABLE(auto, operator&=,                 member_function);
REFLECTABLE(auto, operator(),                 member_function);
REFLECTABLE(auto, operator*,                  member_function);
REFLECTABLE(auto, operator*=,                 member_function);
REFLECTABLE(auto, operator+,                  member_function);
REFLECTABLE(auto, operator++,                 member_function);
REFLECTABLE(auto, operator+=,                 member_function);
REFLECTABLE(auto, REFLECTION_OPERATOR_COMMA,  member_function);
REFLECTABLE(auto, operator-,    member_function);
REFLECTABLE(auto, operator--,   member_function);
REFLECTABLE(auto, operator-=,   member_function);
REFLECTION_REFLECTABLE_NONINTRUSIVE_UNARY_OPERATOR(auto, operator->,   member_function);
REFLECTABLE(auto, operator->*,  member_function);
REFLECTABLE(auto, operator/,    member_function);
REFLECTABLE(auto, operator/=,   member_function);
REFLECTABLE(auto, operator<,    member_function);
REFLECTABLE(auto, operator<<,   member_function);
REFLECTABLE(auto, operator<<=,  member_function);
REFLECTABLE(auto, operator<=,   member_function);
REFLECTABLE(auto, operator=,    member_function);
REFLECTABLE(auto, operator==,   member_function);
REFLECTABLE(auto, operator>,    member_function);
REFLECTABLE(auto, operator>=,   member_function);
REFLECTABLE(auto, operator>>,   member_function);
REFLECTABLE(auto, operator>>=,  member_function);
REFLECTABLE(auto, operator[],   member_function);
REFLECTABLE(auto, operator|,    member_function);
REFLECTABLE(auto, operator|=,   member_function);
REFLECTABLE(auto, operator||,   member_function);
REFLECTION_REFLECTABLE_NONINTRUSIVE_UNARY_OPERATOR(auto, operator~,    member_function);
REFLECTION_REFLECTABLE_NONINTRUSIVE_UNARY_OPERATOR(auto, operator^,    member_function);
REFLECTABLE(auto, operator^=,   member_function);
